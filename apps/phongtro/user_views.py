from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q, Count
from django.utils import timezone
from datetime import datetime
from .models import PhongTro, CocPhong, LoaiPhong
from apps.nhatro.models import KhuVuc, NhaTro


def tim_phong(request):
    """View t√¨m ki·∫øm ph√≤ng tr·ªç"""
    # L·∫•y t·∫•t c·∫£ ph√≤ng (kh√¥ng ch·ªâ ph√≤ng tr·ªëng)
    phongs = PhongTro.objects.all().select_related(
        'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
    )
    
    # C√°c filter parameters
    ten_phong = request.GET.get('ten_phong', '').strip()
    gia_min = request.GET.get('gia_min', '').strip()
    gia_max = request.GET.get('gia_max', '').strip()
    dien_tich_min = request.GET.get('dien_tich_min', '').strip()
    dien_tich_max = request.GET.get('dien_tich_max', '').strip()
    khu_vuc = request.GET.get('khu_vuc', '').strip()
    loai_phong = request.GET.get('loai_phong', '').strip()
    trang_thai = request.GET.get('trang_thai', '').strip()
    
    # √Åp d·ª•ng filters
    if ten_phong:
        phongs = phongs.filter(TEN_PHONG__icontains=ten_phong)
    
    if gia_min:
        try:
            phongs = phongs.filter(GIA_PHONG__gte=float(gia_min))
        except ValueError:
            pass
    
    if gia_max:
        try:
            phongs = phongs.filter(GIA_PHONG__lte=float(gia_max))
        except ValueError:
            pass
    
    if dien_tich_min:
        try:
            phongs = phongs.filter(DIEN_TICH__gte=float(dien_tich_min))
        except ValueError:
            pass
    
    if dien_tich_max:
        try:
            phongs = phongs.filter(DIEN_TICH__lte=float(dien_tich_max))
        except ValueError:
            pass
    
    if khu_vuc:
        try:
            phongs = phongs.filter(MA_KHU_VUC=int(khu_vuc))
        except ValueError:
            pass
    
    if loai_phong:
        try:
            phongs = phongs.filter(MA_LOAI_PHONG=int(loai_phong))
        except ValueError:
            pass
    
    if trang_thai:
        phongs = phongs.filter(TRANG_THAI_P=trang_thai)
    
    # Pagination
    paginator = Paginator(phongs, 12)  # 12 ph√≤ng m·ªói trang
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # L·∫•y d·ªØ li·ªáu cho filter dropdowns
    khu_vucs = KhuVuc.objects.all().select_related('MA_NHA_TRO')
    loai_phongs = LoaiPhong.objects.all()
    
    context = {
        'page_obj': page_obj,
        'khu_vucs': khu_vucs,
        'loai_phongs': loai_phongs,
        'filters': {
            'ten_phong': ten_phong,
            'gia_min': gia_min,
            'gia_max': gia_max,
            'dien_tich_min': dien_tich_min,
            'dien_tich_max': dien_tich_max,
            'khu_vuc': khu_vuc,
            'loai_phong': loai_phong,
            'trang_thai': trang_thai,
        },
        'total_phongs': paginator.count,
    }
    
    return render(request, 'user/phongtro/tim_phong.html', context)


def chi_tiet_phong(request, ma_phong):
    """View chi ti·∫øt ph√≤ng"""
    phong = get_object_or_404(
        PhongTro.objects.select_related(
            'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
        ),
        MA_PHONG=ma_phong       
    )
    
    context = {
        'phong': phong,
    }
    
    return render(request, 'user/phongtro/chi_tiet_phong.html', context)


def dat_phong(request, ma_phong):
    """View form ƒë·∫∑t ph√≤ng - Ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n"""
    phong = get_object_or_404(
        PhongTro.objects.select_related(
            'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
        ),
        MA_PHONG=ma_phong,
        TRANG_THAI_P='Tr·ªëng'
    )
    
    if request.method == 'POST':
        print(f"üîç DEBUG: POST data = {dict(request.POST)}")
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ form (ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n)
            data = {
                'ma_phong': ma_phong,
                'ho_ten': request.POST.get('ho_ten', '').strip(),
                'so_dien_thoai': request.POST.get('so_dien_thoai', '').strip(),
                'email': request.POST.get('email', '').strip() or None,
                'ngay_bat_dau_thue': None,
                'so_tien_coc': None,
                'ghi_chu': request.POST.get('ghi_chu', '').strip() or None,
            }
            
            # Validate th√¥ng tin c∆° b·∫£n
            if not data['ho_ten']:
                raise ValueError('H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            if not data['so_dien_thoai']:
                raise ValueError('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            # Parse ng√†y b·∫Øt ƒë·∫ßu thu√™
            ngay_bat_dau_str = request.POST.get('ngay_bat_dau_thue', '').strip()
            if not ngay_bat_dau_str:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            try:
                data['ngay_bat_dau_thue'] = datetime.strptime(ngay_bat_dau_str, '%Y-%m-%d').date()
            except (ValueError, TypeError):
                raise ValueError('ƒê·ªãnh d·∫°ng ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng h·ª£p l·ªá.')
            
            # Validate ng√†y b·∫Øt ƒë·∫ßu thu√™ (cho ph√©p t·ª´ ng√†y mai)
            if data['ngay_bat_dau_thue'] is None:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng h·ª£p l·ªá.')
            
            today = timezone.now().date()
            if data['ngay_bat_dau_thue'] <= today:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ ph·∫£i t·ª´ ng√†y mai tr·ªü ƒëi.')
            
            # Parse s·ªë ti·ªÅn c·ªçc
            so_tien_coc_str = request.POST.get('so_tien_coc', '').strip()
            if not so_tien_coc_str:
                raise ValueError('S·ªë ti·ªÅn c·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            try:
                data['so_tien_coc'] = float(so_tien_coc_str)
                if data['so_tien_coc'] is None or data['so_tien_coc'] <= 0:
                    raise ValueError('S·ªë ti·ªÅn c·ªçc ph·∫£i l·ªõn h∆°n 0.')
            except (ValueError, TypeError):
                raise ValueError('S·ªë ti·ªÅn c·ªçc kh√¥ng h·ª£p l·ªá.')
            
            # Ki·ªÉm tra ph√≤ng c√≤n tr·ªëng
            phong_check = PhongTro.objects.get(MA_PHONG=ma_phong)
            if phong_check.TRANG_THAI_P != 'Tr·ªëng':
                raise ValueError('Ph√≤ng ƒë√£ ƒë∆∞·ª£c thu√™ ho·∫∑c kh√¥ng c√≤n tr·ªëng.')
            
            # T·∫°o ƒë·∫∑t ph√≤ng online
            dat_phong = CocPhong.tao_dat_phong_online(
                phong=phong_check,
                ho_ten=data['ho_ten'],
                so_dien_thoai=data['so_dien_thoai'],
                email=data.get('email'),
                ngay_du_kien_vao=data['ngay_bat_dau_thue'],
                tien_coc=data['so_tien_coc'],
                ghi_chu=data.get('ghi_chu')
            )
            
            messages.success(
                request, 
                f'ƒê·∫∑t ph√≤ng th√†nh c√¥ng! M√£ ƒë·∫∑t ph√≤ng: {dat_phong.MA_COC_PHONG}. '
                'Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin.'
            )
            
            return redirect('user_phongtro:xac_nhan_dat_phong', ma_dat_phong=dat_phong.MA_COC_PHONG)
            
        except ValueError as e:
            messages.error(request, str(e))
        except Exception as e:
            messages.error(request, f'C√≥ l·ªói x·∫£y ra: {str(e)}')
    
    context = {
        'phong': phong,
        'today': timezone.now().date(),
    }
    
    return render(request, 'user/datphong/dat_phong.html', context)


def xac_nhan_dat_phong(request, ma_dat_phong):
    """View x√°c nh·∫≠n ƒë·∫∑t ph√≤ng th√†nh c√¥ng"""
    dat_phong = get_object_or_404(
        CocPhong.objects.select_related(
            'MA_PHONG', 'MA_PHONG__MA_LOAI_PHONG', 
            'MA_PHONG__MA_KHU_VUC', 'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
        ).filter(NGUON_TAO='ONLINE'),
        MA_COC_PHONG=ma_dat_phong
    )
    
    context = {
        'dat_phong': dat_phong,
    }
    
    return render(request, 'user/datphong/xac_nhan_dat_phong.html', context)


def tra_cuu_dat_phong(request):
    """View tra c·ª©u ƒë∆°n ƒë·∫∑t ph√≤ng"""
    dat_phong = None
    
    if request.method == 'POST':
        ma_dat_phong = request.POST.get('ma_dat_phong', '').strip()
        so_dien_thoai = request.POST.get('so_dien_thoai', '').strip()
        
        if ma_dat_phong and so_dien_thoai:
            try:
                dat_phong = CocPhong.objects.select_related(
                    'MA_PHONG', 'MA_PHONG__MA_LOAI_PHONG',
                    'MA_PHONG__MA_KHU_VUC', 'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
                ).get(
                    MA_COC_PHONG=ma_dat_phong,
                    SO_DIEN_THOAI_TEMP=so_dien_thoai,
                    NGUON_TAO='ONLINE'
                )
            except CocPhong.DoesNotExist:
                messages.error(request, 'Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ph√≤ng v·ªõi th√¥ng tin ƒë√£ nh·∫≠p.')
            except Exception as e:
                messages.error(request, f'C√≥ l·ªói x·∫£y ra: {str(e)}')
        else:
            messages.error(request, 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ ƒë·∫∑t ph√≤ng v√† s·ªë ƒëi·ªán tho·∫°i.')
    
    context = {
        'dat_phong': dat_phong,
    }
    
    return render(request, 'user/datphong/tra_cuu_dat_phong.html', context)


# API views for AJAX requests
def api_phong_autocomplete(request):
    """API t·ª± ƒë·ªông ho√†n th√†nh t√™n ph√≤ng"""
    term = request.GET.get('term', '').strip()
    phongs = []
    
    if term:
        phong_list = PhongTro.objects.filter(
            TEN_PHONG__icontains=term,
            TRANG_THAI_P='Tr·ªëng'
        ).values('MA_PHONG', 'TEN_PHONG')[:10]
        
        phongs = [
            {
                'id': phong['MA_PHONG'],
                'label': phong['TEN_PHONG'],
                'value': phong['TEN_PHONG']
            }
            for phong in phong_list
        ]
    
    return JsonResponse(phongs, safe=False)


def api_phong_info(request, ma_phong):
    """API l·∫•y th√¥ng tin ph√≤ng"""
    try:
        phong = PhongTro.objects.select_related(
            'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
        ).get(MA_PHONG=ma_phong, TRANG_THAI_P='Tr·ªëng')
        
        data = {
            'ma_phong': phong.MA_PHONG,
            'ten_phong': phong.TEN_PHONG,
            'gia_phong': float(phong.GIA_PHONG or 0),
            'dien_tich': float(phong.DIEN_TICH or 0),
            'so_nguoi_toi_da': phong.SO_NGUOI_TOI_DA,
            'so_tien_can_coc': float(phong.SO_TIEN_CAN_COC or 0),
            'mo_ta': phong.MO_TA_P,
            'loai_phong': phong.MA_LOAI_PHONG.TEN_LOAI_PHONG if phong.MA_LOAI_PHONG else '',
            'khu_vuc': phong.MA_KHU_VUC.TEN_KHU_VUC if phong.MA_KHU_VUC else '',
            'nha_tro': phong.MA_KHU_VUC.MA_NHA_TRO.TEN_NHA_TRO if phong.MA_KHU_VUC and phong.MA_KHU_VUC.MA_NHA_TRO else '',
        }
        
        return JsonResponse({'success': True, 'data': data})
        
    except PhongTro.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c thu√™.'})
    except Exception as e:
        return JsonResponse({'success': False, 'message': str(e)})


