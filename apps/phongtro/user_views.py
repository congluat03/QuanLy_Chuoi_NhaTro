from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q, Count
from django.utils import timezone
from datetime import datetime
from .models import PhongTro, CocPhong, LoaiPhong, DangTinPhong
from apps.nhatro.models import KhuVuc, NhaTro


def tim_phong(request):
    """View t√¨m ki·∫øm ph√≤ng tr·ªç - Ch·ªâ hi·ªÉn th·ªã ph√≤ng c√≥ tin ƒëƒÉng"""
    # L·∫•y tin ƒëƒÉng ƒëang hi·ªÉn th·ªã
    tin_dang_list = DangTinPhong.objects.filter(
        TRANG_THAI='DANG_HIEN_THI'
    ).select_related(
        'MA_PHONG', 
        'MA_PHONG__MA_LOAI_PHONG', 
        'MA_PHONG__MA_KHU_VUC', 
        'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
    ).prefetch_related('hinh_anh')
    
    # C√°c filter parameters
    gia_min = request.GET.get('gia_min', '').strip()
    gia_max = request.GET.get('gia_max', '').strip()
    dien_tich_min = request.GET.get('dien_tich_min', '').strip()
    dien_tich_max = request.GET.get('dien_tich_max', '').strip()
    khu_vuc = request.GET.get('khu_vuc', '').strip()
    loai_phong = request.GET.get('loai_phong', '').strip()
    vi_tri = request.GET.get('vi_tri', '').strip()
    sort_by = request.GET.get('sort', '').strip()
    
    # √Åp d·ª•ng filters cho tin ƒëƒÉng
    if gia_min:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__GIA_PHONG__gte=float(gia_min))
        except ValueError:
            pass
    
    if gia_max:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__GIA_PHONG__lte=float(gia_max))
        except ValueError:
            pass
    
    if dien_tich_min:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__DIEN_TICH__gte=float(dien_tich_min))
        except ValueError:
            pass
    
    if dien_tich_max:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__DIEN_TICH__lte=float(dien_tich_max))
        except ValueError:
            pass
    
    if khu_vuc:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__MA_KHU_VUC=int(khu_vuc))
        except ValueError:
            pass
    
    if loai_phong:
        try:
            tin_dang_list = tin_dang_list.filter(MA_PHONG__MA_LOAI_PHONG=int(loai_phong))
        except ValueError:
            pass
    
    # T√¨m ki·∫øm theo v·ªã tr√≠ (t√™n khu v·ª±c, t√™n nh√† tr·ªç, ƒë·ªãa ch·ªâ)
    if vi_tri:
        tin_dang_list = tin_dang_list.filter(
            Q(MA_PHONG__MA_KHU_VUC__TEN_KHU_VUC__icontains=vi_tri) |
            Q(MA_PHONG__MA_KHU_VUC__MA_NHA_TRO__TEN_NHA_TRO__icontains=vi_tri) |
            Q(MA_PHONG__MA_KHU_VUC__MA_NHA_TRO__DIA_CHI__icontains=vi_tri) |
            Q(TIEU_DE__icontains=vi_tri) |
            Q(MO_TA_TIN__icontains=vi_tri)
        )
    
    # √Åp d·ª•ng s·∫Øp x·∫øp
    if sort_by == 'price_asc':
        tin_dang_list = tin_dang_list.order_by('MA_PHONG__GIA_PHONG')
    elif sort_by == 'price_desc':
        tin_dang_list = tin_dang_list.order_by('-MA_PHONG__GIA_PHONG')
    elif sort_by == 'area_desc':
        tin_dang_list = tin_dang_list.order_by('-MA_PHONG__DIEN_TICH')
    elif sort_by == 'newest':
        tin_dang_list = tin_dang_list.order_by('-NGAY_DANG')
    else:
        # M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo l∆∞·ª£t xem gi·∫£m d·∫ßn v√† ng√†y ƒëƒÉng m·ªõi nh·∫•t
        tin_dang_list = tin_dang_list.order_by('-LUOT_XEM', '-NGAY_DANG')
    
    # Pagination
    paginator = Paginator(tin_dang_list, 12)  # 12 tin ƒëƒÉng m·ªói trang
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # L·∫•y d·ªØ li·ªáu cho filter dropdowns
    khu_vucs = KhuVuc.objects.all().select_related('MA_NHA_TRO')
    loai_phongs = LoaiPhong.objects.all()
    
    context = {
        'page_obj': page_obj,
        'khu_vucs': khu_vucs,
        'loai_phongs': loai_phongs,
        'filters': {
            'gia_min': gia_min,
            'gia_max': gia_max,
            'dien_tich_min': dien_tich_min,
            'dien_tich_max': dien_tich_max,
            'khu_vuc': khu_vuc,
            'loai_phong': loai_phong,
            'vi_tri': vi_tri,
            'sort': sort_by,
        },
        'total_phongs': paginator.count,
        'request': request,  # ƒê·ªÉ template c√≥ th·ªÉ truy c·∫≠p request.GET
    }
    
    return render(request, 'user/phongtro/tim_phong.html', context)


def chi_tiet_phong(request, ma_phong):
    """View chi ti·∫øt ph√≤ng - Hi·ªÉn th·ªã t·ª´ tin ƒëƒÉng"""
    # L·∫•y tin ƒëƒÉng c·ªßa ph√≤ng n√†y
    tin_dang = get_object_or_404(
        DangTinPhong.objects.select_related(
            'MA_PHONG',
            'MA_PHONG__MA_LOAI_PHONG', 
            'MA_PHONG__MA_KHU_VUC', 
            'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
        ).prefetch_related('hinh_anh'),
        MA_PHONG=ma_phong,
        TRANG_THAI='DANG_HIEN_THI'
    )
    
    # TƒÉng l∆∞·ª£t xem
    tin_dang.tang_luot_xem()
    
    context = {
        'tin_dang': tin_dang,
        'phong': tin_dang.MA_PHONG,  # Backward compatibility
    }
    
    return render(request, 'user/phongtro/chi_tiet_phong.html', context)


def dat_phong(request, ma_phong):
    """View form ƒë·∫∑t ph√≤ng - Ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n"""
    phong = get_object_or_404(
        PhongTro.objects.select_related(
            'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
        ),
        MA_PHONG=ma_phong,
        TRANG_THAI_P='Tr·ªëng'
    )
    
    if request.method == 'POST':
        print(f"üîç DEBUG: POST data = {dict(request.POST)}")
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ form (ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n)
            data = {
                'ma_phong': ma_phong,
                'ho_ten': request.POST.get('ho_ten', '').strip(),
                'so_dien_thoai': request.POST.get('so_dien_thoai', '').strip(),
                'email': request.POST.get('email', '').strip() or None,
                'ngay_bat_dau_thue': None,
                'so_tien_coc': None,
                'ghi_chu': request.POST.get('ghi_chu', '').strip() or None,
            }
            
            # Validate th√¥ng tin c∆° b·∫£n
            if not data['ho_ten']:
                raise ValueError('H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            if not data['so_dien_thoai']:
                raise ValueError('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            # Parse ng√†y b·∫Øt ƒë·∫ßu thu√™
            ngay_bat_dau_str = request.POST.get('ngay_bat_dau_thue', '').strip()
            if not ngay_bat_dau_str:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            try:
                data['ngay_bat_dau_thue'] = datetime.strptime(ngay_bat_dau_str, '%Y-%m-%d').date()
            except (ValueError, TypeError):
                raise ValueError('ƒê·ªãnh d·∫°ng ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng h·ª£p l·ªá.')
            
            # Validate ng√†y b·∫Øt ƒë·∫ßu thu√™ (cho ph√©p t·ª´ ng√†y mai)
            if data['ngay_bat_dau_thue'] is None:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ kh√¥ng h·ª£p l·ªá.')
            
            today = timezone.now().date()
            if data['ngay_bat_dau_thue'] <= today:
                raise ValueError('Ng√†y b·∫Øt ƒë·∫ßu thu√™ ph·∫£i t·ª´ ng√†y mai tr·ªü ƒëi.')
            
            # Parse s·ªë ti·ªÅn c·ªçc
            so_tien_coc_str = request.POST.get('so_tien_coc', '').strip()
            if not so_tien_coc_str:
                raise ValueError('S·ªë ti·ªÅn c·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            
            try:
                data['so_tien_coc'] = float(so_tien_coc_str)
                if data['so_tien_coc'] is None or data['so_tien_coc'] <= 0:
                    raise ValueError('S·ªë ti·ªÅn c·ªçc ph·∫£i l·ªõn h∆°n 0.')
            except (ValueError, TypeError):
                raise ValueError('S·ªë ti·ªÅn c·ªçc kh√¥ng h·ª£p l·ªá.')
            
            # Ki·ªÉm tra ph√≤ng c√≤n tr·ªëng
            phong_check = PhongTro.objects.get(MA_PHONG=ma_phong)
            if phong_check.TRANG_THAI_P != 'Tr·ªëng':
                raise ValueError('Ph√≤ng ƒë√£ ƒë∆∞·ª£c thu√™ ho·∫∑c kh√¥ng c√≤n tr·ªëng.')
            
            # T·∫°o ƒë·∫∑t ph√≤ng online
            dat_phong = CocPhong.tao_dat_phong_online(
                phong=phong_check,
                ho_ten=data['ho_ten'],
                so_dien_thoai=data['so_dien_thoai'],
                email=data.get('email'),
                ngay_du_kien_vao=data['ngay_bat_dau_thue'],
                tien_coc=data['so_tien_coc'],
                ghi_chu=data.get('ghi_chu')
            )
            
            messages.success(
                request, 
                f'ƒê·∫∑t ph√≤ng th√†nh c√¥ng! M√£ ƒë·∫∑t ph√≤ng: {dat_phong.MA_COC_PHONG}. '
                'Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin.'
            )
            
            return redirect('user_phongtro:xac_nhan_dat_phong', ma_dat_phong=dat_phong.MA_COC_PHONG)
            
        except ValueError as e:
            messages.error(request, str(e))
        except Exception as e:
            messages.error(request, f'C√≥ l·ªói x·∫£y ra: {str(e)}')
    
    context = {
        'phong': phong,
        'today': timezone.now().date(),
    }
    
    return render(request, 'user/datphong/dat_phong.html', context)


def xac_nhan_dat_phong(request, ma_dat_phong):
    """View x√°c nh·∫≠n ƒë·∫∑t ph√≤ng th√†nh c√¥ng"""
    dat_phong = get_object_or_404(
        CocPhong.objects.select_related(
            'MA_PHONG', 'MA_PHONG__MA_LOAI_PHONG', 
            'MA_PHONG__MA_KHU_VUC', 'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
        ).filter(NGUON_TAO='ONLINE'),
        MA_COC_PHONG=ma_dat_phong
    )
    
    context = {
        'dat_phong': dat_phong,
    }
    
    return render(request, 'user/datphong/xac_nhan_dat_phong.html', context)


def tra_cuu_dat_phong(request):
    """View tra c·ª©u ƒë∆°n ƒë·∫∑t ph√≤ng"""
    dat_phong = None
    
    if request.method == 'POST':
        ma_dat_phong = request.POST.get('ma_dat_phong', '').strip()
        so_dien_thoai = request.POST.get('so_dien_thoai', '').strip()
        
        if ma_dat_phong and so_dien_thoai:
            try:
                dat_phong = CocPhong.objects.select_related(
                    'MA_PHONG', 'MA_PHONG__MA_LOAI_PHONG',
                    'MA_PHONG__MA_KHU_VUC', 'MA_PHONG__MA_KHU_VUC__MA_NHA_TRO'
                ).get(
                    MA_COC_PHONG=ma_dat_phong,
                    SO_DIEN_THOAI_TEMP=so_dien_thoai,
                    NGUON_TAO='ONLINE'
                )
            except CocPhong.DoesNotExist:
                messages.error(request, 'Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ph√≤ng v·ªõi th√¥ng tin ƒë√£ nh·∫≠p.')
            except Exception as e:
                messages.error(request, f'C√≥ l·ªói x·∫£y ra: {str(e)}')
        else:
            messages.error(request, 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ ƒë·∫∑t ph√≤ng v√† s·ªë ƒëi·ªán tho·∫°i.')
    
    context = {
        'dat_phong': dat_phong,
    }
    
    return render(request, 'user/datphong/tra_cuu_dat_phong.html', context)


# API views for AJAX requests
def api_phong_autocomplete(request):
    """API t·ª± ƒë·ªông ho√†n th√†nh t√™n ph√≤ng"""
    term = request.GET.get('term', '').strip()
    phongs = []
    
    if term:
        phong_list = PhongTro.objects.filter(
            TEN_PHONG__icontains=term,
            TRANG_THAI_P='Tr·ªëng'
        ).values('MA_PHONG', 'TEN_PHONG')[:10]
        
        phongs = [
            {
                'id': phong['MA_PHONG'],
                'label': phong['TEN_PHONG'],
                'value': phong['TEN_PHONG']
            }
            for phong in phong_list
        ]
    
    return JsonResponse(phongs, safe=False)


def api_location_autocomplete(request):
    """API t·ª± ƒë·ªông ho√†n th√†nh ƒë·ªãa ƒëi·ªÉm"""
    term = request.GET.get('term', '').strip()
    locations = []
    
    if term and len(term) >= 2:
        # T√¨m ki·∫øm trong khu v·ª±c v√† nh√† tr·ªç
        khu_vucs = KhuVuc.objects.filter(
            Q(TEN_KHU_VUC__icontains=term) |
            Q(MA_NHA_TRO__TEN_NHA_TRO__icontains=term) |
            Q(MA_NHA_TRO__DIA_CHI__icontains=term)
        ).select_related('MA_NHA_TRO').distinct()[:10]
        
        for kv in khu_vucs:
            locations.append({
                'display_name': f"{kv.TEN_KHU_VUC} - {kv.MA_NHA_TRO.TEN_NHA_TRO}",
                'type': 'khu_vuc',
                'id': kv.MA_KHU_VUC,
                'address': kv.MA_NHA_TRO.DIA_CHI if kv.MA_NHA_TRO else '',
            })
        
        # Th√™m c√°c g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn n·∫øu c·∫ßn
        popular_locations = [
            'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            'Qu·∫≠n 3, Th√†nh ph·ªë H·ªì Ch√≠ Minh', 
            'Qu·∫≠n B√¨nh Th·∫°nh, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            'Qu·∫≠n 7, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            'Qu·∫≠n Ph√∫ Nhu·∫≠n, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            'Qu·∫≠n Th·ªß ƒê·ª©c, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            'Qu·∫≠n G√≤ V·∫•p, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        ]
        
        # Th√™m ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn n·∫øu kh·ªõp
        for loc in popular_locations:
            if term.lower() in loc.lower() and len(locations) < 10:
                locations.append({
                    'display_name': loc,
                    'type': 'popular',
                    'id': None,
                    'address': loc,
                })
    
    return JsonResponse(locations, safe=False)


def api_provinces(request):
    """API l·∫•y danh s√°ch t·ªânh th√†nh"""
    provinces = [
        {
            'code': 'HCM',
            'name': 'TP. H·ªì Ch√≠ Minh',
            'type': 'Th√†nh ph·ªë Trung ∆∞∆°ng'
        },
        {
            'code': 'HN', 
            'name': 'H√† N·ªôi',
            'type': 'Th√†nh ph·ªë Trung ∆∞∆°ng'
        },
        {
            'code': 'DN',
            'name': 'ƒê√† N·∫µng', 
            'type': 'Th√†nh ph·ªë Trung ∆∞∆°ng'
        },
        {
            'code': 'HP',
            'name': 'H·∫£i Ph√≤ng',
            'type': 'Th√†nh ph·ªë Trung ∆∞∆°ng'
        },
        {
            'code': 'CT',
            'name': 'C·∫ßn Th∆°',
            'type': 'Th√†nh ph·ªë Trung ∆∞∆°ng'
        }
    ]
    return JsonResponse(provinces, safe=False)


def api_districts(request, province_code):
    """API l·∫•y danh s√°ch qu·∫≠n huy·ªán theo t·ªânh"""
    districts_data = {
        'HCM': [
            {'code': 'Q1', 'name': 'Qu·∫≠n 1', 'type': 'Qu·∫≠n'},
            {'code': 'Q3', 'name': 'Qu·∫≠n 3', 'type': 'Qu·∫≠n'},
            {'code': 'Q4', 'name': 'Qu·∫≠n 4', 'type': 'Qu·∫≠n'},
            {'code': 'Q5', 'name': 'Qu·∫≠n 5', 'type': 'Qu·∫≠n'},
            {'code': 'Q6', 'name': 'Qu·∫≠n 6', 'type': 'Qu·∫≠n'},
            {'code': 'Q7', 'name': 'Qu·∫≠n 7', 'type': 'Qu·∫≠n'},
            {'code': 'Q8', 'name': 'Qu·∫≠n 8', 'type': 'Qu·∫≠n'},
            {'code': 'Q10', 'name': 'Qu·∫≠n 10', 'type': 'Qu·∫≠n'},
            {'code': 'Q11', 'name': 'Qu·∫≠n 11', 'type': 'Qu·∫≠n'},
            {'code': 'Q12', 'name': 'Qu·∫≠n 12', 'type': 'Qu·∫≠n'},
            {'code': 'BT', 'name': 'Qu·∫≠n B√¨nh Th·∫°nh', 'type': 'Qu·∫≠n'},
            {'code': 'PN', 'name': 'Qu·∫≠n Ph√∫ Nhu·∫≠n', 'type': 'Qu·∫≠n'},
            {'code': 'TB', 'name': 'Qu·∫≠n T√¢n B√¨nh', 'type': 'Qu·∫≠n'},
            {'code': 'TD', 'name': 'Qu·∫≠n Th·ªß ƒê·ª©c', 'type': 'Qu·∫≠n'},
            {'code': 'GV', 'name': 'Qu·∫≠n G√≤ V·∫•p', 'type': 'Qu·∫≠n'}
        ],
        'HN': [
            {'code': 'HK', 'name': 'Qu·∫≠n Ho√†n Ki·∫øm', 'type': 'Qu·∫≠n'},
            {'code': 'BD', 'name': 'Qu·∫≠n Ba ƒê√¨nh', 'type': 'Qu·∫≠n'},
            {'code': 'CG', 'name': 'Qu·∫≠n C·∫ßu Gi·∫•y', 'type': 'Qu·∫≠n'},
            {'code': 'DD', 'name': 'Qu·∫≠n ƒê·ªëng ƒêa', 'type': 'Qu·∫≠n'},
            {'code': 'HB', 'name': 'Qu·∫≠n Hai B√† Tr∆∞ng', 'type': 'Qu·∫≠n'},
            {'code': 'TX', 'name': 'Qu·∫≠n Thanh Xu√¢n', 'type': 'Qu·∫≠n'}
        ],
        'DN': [
            {'code': 'HC', 'name': 'Qu·∫≠n H·∫£i Ch√¢u', 'type': 'Qu·∫≠n'},
            {'code': 'TK', 'name': 'Qu·∫≠n Thanh Kh√™', 'type': 'Qu·∫≠n'},
            {'code': 'SK', 'name': 'Qu·∫≠n S∆°n Tr√†', 'type': 'Qu·∫≠n'},
            {'code': 'NV', 'name': 'Qu·∫≠n Ng≈© H√†nh S∆°n', 'type': 'Qu·∫≠n'}
        ]
    }
    
    districts = districts_data.get(province_code, [])
    return JsonResponse(districts, safe=False)


def api_wards(request, province_code, district_code):
    """API l·∫•y danh s√°ch ph∆∞·ªùng x√£ theo qu·∫≠n huy·ªán"""
    wards_data = {
        'HCM': {
            'Q1': [
                {'code': 'P01', 'name': 'Ph∆∞·ªùng B·∫øn Ngh√©', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P02', 'name': 'Ph∆∞·ªùng B·∫øn Th√†nh', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P03', 'name': 'Ph∆∞·ªùng C·∫ßu Kho', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P04', 'name': 'Ph∆∞·ªùng C·∫ßu √îng L√£nh', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P05', 'name': 'Ph∆∞·ªùng C√¥ Giang', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P06', 'name': 'Ph∆∞·ªùng ƒêa Kao', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P07', 'name': 'Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P08', 'name': 'Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P09', 'name': 'Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P10', 'name': 'Ph∆∞·ªùng T√¢n ƒê·ªãnh', 'type': 'Ph∆∞·ªùng'}
            ],
            'Q3': [
                {'code': 'P01', 'name': 'Ph∆∞·ªùng 1', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P02', 'name': 'Ph∆∞·ªùng 2', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P03', 'name': 'Ph∆∞·ªùng 3', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P04', 'name': 'Ph∆∞·ªùng 4', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P05', 'name': 'Ph∆∞·ªùng 5', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P06', 'name': 'Ph∆∞·ªùng 6', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P07', 'name': 'Ph∆∞·ªùng 7', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P08', 'name': 'Ph∆∞·ªùng 8', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P09', 'name': 'Ph∆∞·ªùng 9', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P10', 'name': 'Ph∆∞·ªùng 10', 'type': 'Ph∆∞·ªùng'}
            ],
            'BT': [
                {'code': 'P01', 'name': 'Ph∆∞·ªùng 1', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P02', 'name': 'Ph∆∞·ªùng 2', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P03', 'name': 'Ph∆∞·ªùng 3', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P11', 'name': 'Ph∆∞·ªùng 11', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P12', 'name': 'Ph∆∞·ªùng 12', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P13', 'name': 'Ph∆∞·ªùng 13', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P14', 'name': 'Ph∆∞·ªùng 14', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P15', 'name': 'Ph∆∞·ªùng 15', 'type': 'Ph∆∞·ªùng'}
            ]
        },
        'HN': {
            'HK': [
                {'code': 'P01', 'name': 'Ph∆∞·ªùng Ch∆∞∆°ng D∆∞∆°ng', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P02', 'name': 'Ph∆∞·ªùng C·ª≠a ƒê√¥ng', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P03', 'name': 'Ph∆∞·ªùng C·ª≠a Nam', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P04', 'name': 'Ph∆∞·ªùng H√†ng B·∫°c', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P05', 'name': 'Ph∆∞·ªùng H√†ng B√†i', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P06', 'name': 'Ph∆∞·ªùng H√†ng Bu·ªìm', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P07', 'name': 'Ph∆∞·ªùng H√†ng ƒê√†o', 'type': 'Ph∆∞·ªùng'},
                {'code': 'P08', 'name': 'Ph∆∞·ªùng H√†ng Gai', 'type': 'Ph∆∞·ªùng'}
            ]
        }
    }
    
    wards = wards_data.get(province_code, {}).get(district_code, [])
    return JsonResponse(wards, safe=False)


def api_phong_info(request, ma_phong):
    """API l·∫•y th√¥ng tin ph√≤ng"""
    try:
        phong = PhongTro.objects.select_related(
            'MA_LOAI_PHONG', 'MA_KHU_VUC', 'MA_KHU_VUC__MA_NHA_TRO'
        ).get(MA_PHONG=ma_phong, TRANG_THAI_P='Tr·ªëng')
        
        data = {
            'ma_phong': phong.MA_PHONG,
            'ten_phong': phong.TEN_PHONG,
            'gia_phong': float(phong.GIA_PHONG or 0),
            'dien_tich': float(phong.DIEN_TICH or 0),
            'so_nguoi_toi_da': phong.SO_NGUOI_TOI_DA,
            'so_tien_can_coc': float(phong.SO_TIEN_CAN_COC or 0),
            'mo_ta': phong.MO_TA_P,
            'loai_phong': phong.MA_LOAI_PHONG.TEN_LOAI_PHONG if phong.MA_LOAI_PHONG else '',
            'khu_vuc': phong.MA_KHU_VUC.TEN_KHU_VUC if phong.MA_KHU_VUC else '',
            'nha_tro': phong.MA_KHU_VUC.MA_NHA_TRO.TEN_NHA_TRO if phong.MA_KHU_VUC and phong.MA_KHU_VUC.MA_NHA_TRO else '',
        }
        
        return JsonResponse({'success': True, 'data': data})
        
    except PhongTro.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c thu√™.'})
    except Exception as e:
        return JsonResponse({'success': False, 'message': str(e)})


