#!/usr/bin/env python
"""
Script ƒë·ªÉ s·ª≠a l·ªói migration NodeNotFoundError cho hopdong app
"""

import os
import sys
import django
from django.conf import settings

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.db import connection
from django.core.management import execute_from_command_line
from django.apps import apps

def fix_hopdong_migrations():
    """S·ª≠a l·ªói migration cho hopdong app"""
    
    print("üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i migration...")
    
    try:
        with connection.cursor() as cursor:
            # Ki·ªÉm tra c√°c migration hi·ªán t·∫°i c·ªßa hopdong
            cursor.execute("""
                SELECT name, applied FROM django_migrations 
                WHERE app = 'hopdong' 
                ORDER BY applied
            """)
            current_migrations = cursor.fetchall()
            
            print(f"üìã T√¨m th·∫•y {len(current_migrations)} migration records cho hopdong:")
            for name, applied in current_migrations:
                print(f"  - {name} (applied: {applied})")
            
            # X√≥a t·∫•t c·∫£ migration records c·ªßa hopdong
            print("\nüßπ ƒêang x√≥a c√°c migration records c≈©...")
            cursor.execute("DELETE FROM django_migrations WHERE app = 'hopdong'")
            deleted_count = cursor.rowcount
            print(f"‚úÖ ƒê√£ x√≥a {deleted_count} migration records")
            
            # T·∫°o l·∫°i migration record ƒë·∫ßu ti√™n
            print("\nüîß ƒêang t·∫°o l·∫°i migration state...")
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('hopdong', '0001_initial', NOW())
            """)
            print("‚úÖ ƒê√£ t·∫°o migration record: hopdong.0001_initial")
            
            # Ki·ªÉm tra l·∫°i
            cursor.execute("""
                SELECT name, applied FROM django_migrations 
                WHERE app = 'hopdong' 
                ORDER BY applied
            """)
            new_migrations = cursor.fetchall()
            
            print(f"\nüìã Migration state m·ªõi cho hopdong:")
            for name, applied in new_migrations:
                print(f"  ‚úÖ {name} (applied: {applied})")
                
        print("\nüéâ Ho√†n th√†nh! Migration error ƒë√£ ƒë∆∞·ª£c s·ª≠a.")
        print("\nB√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y:")
        print("  python manage.py showmigrations hopdong")
        print("  python manage.py runserver")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi s·ª≠a migration: {e}")
        print("\nüîß Th·ª≠ c√°c c√°ch kh√°c:")
        print("1. Ch·∫°y: python manage.py migrate hopdong 0001 --fake")
        print("2. Ho·∫∑c ch·∫°y SQL trong fix_migrations.sql")
        return False

def check_migration_files():
    """Ki·ªÉm tra c√°c migration files trong th∆∞ m·ª•c"""
    migration_dir = "apps/hopdong/migrations"
    
    print(f"\nüìÅ Ki·ªÉm tra migration files trong {migration_dir}:")
    try:
        files = os.listdir(migration_dir)
        migration_files = [f for f in files if f.endswith('.py') and f != '__init__.py']
        
        if migration_files:
            print(f"  T√¨m th·∫•y {len(migration_files)} migration files:")
            for f in sorted(migration_files):
                print(f"    - {f}")
        else:
            print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y migration files n√†o")
            
    except FileNotFoundError:
        print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {migration_dir}")

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu s·ª≠a l·ªói migration cho hopdong app...")
    print("="*50)
    
    # Ki·ªÉm tra migration files
    check_migration_files()
    
    # S·ª≠a migration state trong database
    success = fix_hopdong_migrations()
    
    if success:
        print("\n" + "="*50)
        print("‚úÖ TH√ÄNH C√îNG! L·ªói migration ƒë√£ ƒë∆∞·ª£c s·ª≠a.")
        print("B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng b√¨nh th∆∞·ªùng.")
    else:
        print("\n" + "="*50)
        print("‚ùå CH∆ØA S·ª¨A ƒê∆Ø·ª¢C. Vui l√≤ng th·ª≠ c√°c c√°ch th·ªß c√¥ng.")
        
    sys.exit(0 if success else 1)