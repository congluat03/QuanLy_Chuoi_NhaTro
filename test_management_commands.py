#!/usr/bin/env python
"""
Script test Management Commands cho H·ª£p ƒë·ªìng
Ch·∫°y: python test_management_commands.py
"""
import subprocess
import sys
import os
from datetime import datetime

def run_command(command, description):
    """Ch·∫°y m·ªôt command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"\n{'='*60}")
    print(f"Testing: {description}")
    print(f"Command: {command}")
    print('='*60)
    
    try:
        # Ch·∫°y command
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            timeout=60  # Timeout 60 gi√¢y
        )
        
        print(f"Return Code: {result.returncode}")
        
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ SUCCESS")
        else:
            print("‚ùå FAILED")
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚è∞ TIMEOUT: Command took too long to execute")
        return False
    except FileNotFoundError:
        print("‚ùå ERROR: python/python3 not found or manage.py not found")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def test_management_commands():
    """Test c√°c management commands"""
    print("üöÄ TESTING MANAGEMENT COMMANDS FOR H·ª¢P ƒê·ªíNG")
    print(f"Time: {datetime.now()}")
    print(f"Working Directory: {os.getcwd()}")
    
    # Ki·ªÉm tra file manage.py
    if not os.path.exists('manage.py'):
        print("‚ùå ERROR: manage.py not found. Please run this script from Django project root.")
        return
    
    results = {}
    
    # 1. Test help command
    print("\nüîç TESTING HELP COMMANDS...")
    results['help'] = run_command(
        'python manage.py help',
        'Django help command'
    )
    
    # 2. Test c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng h√†ng ng√†y
    print("\nüìÖ TESTING C·∫¨P NH·∫¨T H·ª¢P ƒê·ªíNG H√ÄNG NG√ÄY...")
    results['cap_nhat_help'] = run_command(
        'python manage.py help cap_nhat_hop_dong_hang_ngay',
        'Help for cap_nhat_hop_dong_hang_ngay'
    )
    
    results['cap_nhat_dry'] = run_command(
        'python manage.py cap_nhat_hop_dong_hang_ngay --dry-run',
        'C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng h√†ng ng√†y (dry run)'
    )
    
    results['cap_nhat_real'] = run_command(
        'python manage.py cap_nhat_hop_dong_hang_ngay',
        'C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng h√†ng ng√†y (th·ª±c t·∫ø)'
    )
    
    # 3. Test sinh h√≥a ƒë∆°n h√†ng th√°ng
    print("\nüí∞ TESTING SINH H√ìA ƒê∆†N H√ÄNG TH√ÅNG...")
    results['sinh_hd_help'] = run_command(
        'python manage.py help sinh_hoa_don_hang_thang',
        'Help for sinh_hoa_don_hang_thang'
    )
    
    results['sinh_hd_dry'] = run_command(
        'python manage.py sinh_hoa_don_hang_thang --dry-run',
        'Sinh h√≥a ƒë∆°n h√†ng th√°ng (dry run)'
    )
    
    current_month = datetime.now().month
    current_year = datetime.now().year
    
    results['sinh_hd_month'] = run_command(
        f'python manage.py sinh_hoa_don_hang_thang --thang {current_month} --nam {current_year} --dry-run',
        f'Sinh h√≥a ƒë∆°n th√°ng {current_month}/{current_year} (dry run)'
    )
    
    results['sinh_hd_real'] = run_command(
        f'python manage.py sinh_hoa_don_hang_thang --thang {current_month} --nam {current_year}',
        f'Sinh h√≥a ƒë∆°n th√°ng {current_month}/{current_year} (th·ª±c t·∫ø)'
    )
    
    # 4. Test other Django commands ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng conflict
    print("\nüîß TESTING OTHER DJANGO COMMANDS...")
    results['check'] = run_command(
        'python manage.py check',
        'Django check command'
    )
    
    results['makemigrations_dry'] = run_command(
        'python manage.py makemigrations --dry-run',
        'Check for pending migrations'
    )
    
    # T·ªïng k·∫øt
    print(f"\n{'='*60}")
    print("üìä TEST RESULTS SUMMARY")
    print('='*60)
    
    success_count = 0
    total_count = len(results)
    
    for test_name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{test_name:25} {status}")
        if success:
            success_count += 1
    
    print(f"\nSUCCESS RATE: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
    
    if success_count == total_count:
        print("üéâ ALL TESTS PASSED!")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the output above for details.")
    
    print("\nüìù NOTES:")
    print("   - Dry run commands should always pass")
    print("   - Real commands may fail if no data exists")
    print("   - Check Django logs for detailed error information")
    print("   - Make sure database is accessible and migrations are applied")

def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng"""
    print("üîç CHECKING ENVIRONMENT...")
    
    # Ki·ªÉm tra Python
    try:
        result = subprocess.run(['python', '--version'], capture_output=True, text=True)
        print(f"Python version: {result.stdout.strip()}")
    except:
        try:
            result = subprocess.run(['python3', '--version'], capture_output=True, text=True)
            print(f"Python version: {result.stdout.strip()}")
        except:
            print("‚ùå Python not found")
            return False
    
    # Ki·ªÉm tra Django
    try:
        result = subprocess.run(['python', '-m', 'django', '--version'], capture_output=True, text=True)
        print(f"Django version: {result.stdout.strip()}")
    except:
        print("‚ùå Django not found or not properly installed")
    
    # Ki·ªÉm tra manage.py
    if os.path.exists('manage.py'):
        print("‚úÖ manage.py found")
    else:
        print("‚ùå manage.py not found")
        return False
    
    # Ki·ªÉm tra apps/hopdong
    if os.path.exists('apps/hopdong'):
        print("‚úÖ apps/hopdong found")
    else:
        print("‚ùå apps/hopdong not found")
    
    return True

def main():
    """H√†m ch√≠nh"""
    print("üß™ MANAGEMENT COMMANDS TESTING SCRIPT")
    print(f"Started at: {datetime.now()}")
    
    if not check_environment():
        print("\n‚ùå Environment check failed. Please fix the issues above.")
        return 1
    
    try:
        test_management_commands()
        return 0
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Testing interrupted by user")
        return 1
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)